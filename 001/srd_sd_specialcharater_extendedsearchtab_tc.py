from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re

class SrdSdSpecialcharaterExtendedsearchtabTc(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "http://samate.nist.gov/"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_srd_sd_specialcharater_extendedsearchtab_tc(self):
        driver = self.driver
        driver.get(self.base_url + "/ngSRD/view.php")
        driver.find_element_by_xpath("//a[contains(text(),'SRD Home')]").click()
        driver.find_element_by_xpath("//a[contains(text(),'Search / Download')]").click()
        driver.find_element_by_xpath("//a[contains(text(),'Extended Search')]").click()
        self.assertEqual("SAMATE Reference Dataset", driver.title)
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("\"This sentence is wrapped in double quotes.\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("\"This sentence is wrapped in double quotes.\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("\"This sentence is wrapped in double quotes.\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='contributor']").send_keys("\"This sentence is wrapped in double quotes.\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("'single quotes'")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("'single quotes'")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("'single quotes'")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("'single quotes'")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("[square brackets]")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("[square brackets]")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("[square brackets]")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("[square brackets]")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("{curly braces}")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("{curly braces}")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("{curly braces}")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("{curly braces}")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("<angle brackets>")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("<angle brackets>")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("<angle brackets>")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("<angle brackets>")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("<!-- XML comment -->")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("<!-- XML comment -->")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("<!-- XML comment -->")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("<!-- XML comment -->")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("\"quoted\" segment & ampersand")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("\"quoted\" segment & ampersand")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("\"quoted\" segment & ampersand")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("\"quoted\" segment & ampersand")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("\"A \"quoted\" segment; & (entity); wrapped in quotes\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("\"A \"quoted\" segment; & (entity); wrapped in quotes\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("\"A \"quoted\" segment; & (entity); wrapped in quotes\"")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("\"A \"quoted\" segment; & (entity); wrapped in quotes\"")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("\\c:\\mydocs")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("\\c:\\mydocs")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("\\c:\\mydocs")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("\\c:\\mydocs")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("Hawai`i")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("Hawai`i")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("Hawai`i")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("Hawai`i")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("#20")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("#20")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_xpath("//a[contains(text(),'Back to the previous page')]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("#20")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("#20")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='reference']").send_keys("\\/")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='description']").send_keys("\\/")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_xpath("//input[@name='author']").send_keys("\\/")
        driver.find_element_by_xpath("//input[@name='Submit']").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("Test Case ID", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Description", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[7]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Weakness", driver.find_element_by_xpath("//div[@id='content']/form/table/tbody/tr/td[8]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_name("contributor").send_keys("\\/")
        driver.find_element_by_name("Submit").click()
        self.assertEqual("SAMATE Reference Dataset :: View all test cases", driver.title)
        try: self.assertEqual("View/Download Downloads:      \n \n There is no such test case in the database! Back to the previous page", driver.find_element_by_xpath("//div[@id='content']").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Back to the previous page", driver.find_element_by_link_text("Back to the previous page").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
